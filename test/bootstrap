#!/usr/bin/env bash

# Force CTest to run tests in parallel.

# Use the provided `gcov` path.

make_vagrant_build_dir()
{
  rm /vagrant/build -rf;
  mkdir -p /vagrant/build;
}

ansible_path() {
  local ansible_path="";

  if [ "$USER" == "vagrant" ]; then
    local ansible_path="/vagrant/ansible/site.yml";
  else
    if [ "$TRAVIS" == true ]; then
      sudo apt-get install aptitude -qq;
      local ansible_path="$TRAVIS_BUILD_DIR/ansible/site.yml";
    fi
  fi

  printf $ansible_path;
}

send_coveralls_payload() {
  export GCOV=$(which gcov);
  cpp-coveralls --gcov "${GCOV}" --gcov-options "\-lcfd" -r . \
    --include /vagrant --include . -t "${COVERALLS_TOKEN}";
}

preset_library_path() {
  if [ ! -r /etc/profile.d/local_lib.sh ]; then
    echo "export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib" | sudo tee \
      /etc/profile.d/local_lib.sh > /dev/null;
    sudo chmod o+rx /etc/profile.d/local_lib.sh;
  fi

  source /etc/profile.d/local_lib.sh;
}

bootstrap_build() {
  if [ ! -x ansible-playbook ]; then
    sudo apt-get install python-pycurl ansible -qq;
  fi

  local _cc=${CC};
  [ -z ${_cc} ] && _cc="gcc";

  preset_library_path;

  hostname | sudo tee /etc/ansible/hosts > /dev/null;
  echo -en "\n[bootstrap] Building for '${_cc}' toolchain from $(ansible_path)...\n";
  ansible-playbook -c local --extra-vars="compiler_family=${_cc}" \
    "$(ansible_path)";
}

dump_log() {
  if [ "$TRAVIS" == true ]; then
    cat "$(find "$TRAVIS_BUILD_DIR" -type f -name "*Last*.log")";
  else
    cat "$(find /vagrant -type f -name "*Last*.log")";
  fi
}

run_build() {
  export CTEST_PARALLEL_LEVEL=2;
  echo $PWD;
  preset_library_path;
  make -j2 all;
  make -e test;
  local _exit=$?;
  echo -en "[test] Testing exited with code ${_exit}.\n";
  if [ $_exit -gt 0 ]; then
    dump_log;
    exit $_exit;
  else
    exit 0;
  fi
}

generate_build() {
  local _compiler=$(which g++);

  if [ "${CC}" == "clang" ]; then
    _compiler=$(which clang-3.5);
  fi

  CC=gcc CXX=${_compiler} cmake -DCI_BUILD=ON "$1" || exit 32
}


case "$1" in
  "--before" )
    bootstrap_build || exit 16
    ;;
  "--generate" )
    mkdir -p build
    generate_build . "build"
    ;;
  "--generate-vagrant" )
    make_vagrant_build_dir
    cd /vagrant/build
    generate_build ..
    ;;
  "--run" )
    run_build
    ;;
  "--run-vagrant" )
    cd /vagrant/build
    run_build;
    ;;
  "--dump-log" )
    dump_log
    ;;
  "--vagrant" )
    /vagrant/test/bootstrap --generate-vagrant
    /vagrant/test/bootstrap --run-vagrant
    ;;
  "--dump-log" )
    if [ "$TRAVIS" == true ]; then
      cat "$(find "$TRAVIS_BUILD_DIR" -type f -name "*LastBuild*.log")";
    else
      cat "$(find /vagrant -type f -name "*LastBuild*.log")";
    fi
    ;;
  "--post" )
    send_coveralls_payload;
    ;;
esac
