#!/usr/bin/env bash

bootstrap_build() {
  echo -en "Running tests on $(uname -a)."

  sudo apt-get update -qq

  echo -en "\n[build]: fetching PPAs....\n"
  sudo apt-get install python-software-properties software-properties-common -qq
  wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -
  sudo apt-add-repository ppa:dhart/ppa -y
  sudo apt-add-repository ppa:ubuntu-toolchain-r/test -y
  sudo apt-add-repository ppa:kubuntu-ppa/beta -y
  sudo add-apt-repository ppa:h-rayflood/llvm -y

  echo -en "\n[build]: updating system...\n"
  sudo apt-get update -qq

  echo -en "\n[build]: installing packages...\n"
  sudo apt-get install -qq libtool automake autconf bison
  sudo apt-get install -qq pkg-config
  sudo apt-get install -qq python-pip python

  sudo pip install cpp-coveralls --upgrade

  # Install dependencies.
  echo -en "\n[build]: installing dependencies...\n"
  sudo apt-get install -qq libjsoncpp-dev
  sudo apt-get install -qq liblog4cxx10-dev
  sudo apt-get install -qq libconfig++-dev
  sudo apt-get install -qq libuuid-dev
  sudo apt-get install -qq doxygen
  sudo apt-get install -qq cxxtest
  sudo apt-get install -qq valgrind
  sudo apt-get install -qq lcov
  sudo apt-get install -qq pkg-config
  sudo apt-get remove  -qq g++*
  sudo apt-get install -qq g++-4.9 clang-3.5
  sudo apt-get install -qq libzmq3-dev libzmqpp-dev
  sudo apt-get remove -qq g++-4.6
  sudo apt-get install -qq g++-4.9 clang-3.5
  sudo apt-get install -qq libzmq3-dev libzmqpp-dev

  install_libuv
  install_cmake

  echo -en "\nDone installing dependencies.\n"
}

install_cmake() {
  sudo apt-get build-dep -qq cmake;
  cd $(mktemp -d);
  wget http://www.cmake.org/files/v2.8/cmake-2.8.12.tar.gz
  tar -xvzf cmake-2.8.12.tar.gz
  cd cmake-2.8.12
  sh autogen.sh
  ./configure
  make -j2
  sudo make install
}

install_libuv() {
  sudo apt-get install git libtool autoconf automake -qq;

  git clone git://github.com/libuv/libuv ~/libuv;
  git checkout v1.2.1;
  cd ~/libuv;
  sh autogen.sh;
  ./configure;
  make -j2;
  sudo make install;
}

if [[ $CXX == "gcc" ]]; then
  export CXX="$(which g++-4.9)"
fi

export CTEST_PARALLEL_LEVEL=2
export GCOV=$(which gcov)

case $1 in
  "--before" )
    bootstrap_build || exit 16
    ;;
  "--generate" )

    cmake . -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=ON -DCI_BUILD=ON || exit 32
    ;;
  "--cmake" )
    install_cmake
    ;;
  "--generate-vagrant" )
    mkdir build; cd build
    cmake /vagrant -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE=ON -DCI_BUILD=OFF || exit 32
    ;;
  "--run" )
    make clean || exit 1
    make Continuous || exit 2
    ;;
  "--run-nightly" )
    make clean || exit 1
    make Nightly || exit 2
    ;;
  "--run-test" )
    make clean || exit 1
    make Experimental || exit 2
    ;;
  "--post" )
    coveralls --gcov $GCOV --gcov-options "\-lcfd" -r . --include src --exclude test -t $COVERALLS_TOKEN
    ;;
  *)
    echo -en <<HELP
test/bootstrap -- Sets up your Ubuntu environment for Wintermute testing.

  --before              Installs the necessary packages.
  --generate            Configures the project using CMake.
  --generate-vagrant    Configures the project using CMake under a Vagrant-like
                        environment.
  --run                 Builds and tests Wintermute.
  --post                Runs post-testing actions (works only on Travis.CI).
  --help                HELLO!
HELP
    ;;
esac
