/*
 * vim: set ft=cpp :
 * Wintermute is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Wintermute is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with Wintermute; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifndef WINTERMUTE_CORE_GLOBALS_HPP
#define WINTERMUTE_CORE_GLOBALS_HPP

#include "wintermute_export.hpp"
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <cxxabi.h>
#include <initializer_list>
#include <memory>
#include <stdexcept>
#include <string>
#include <sys/types.h>
#include <type_traits>
#include <unistd.h>

using std::string;
using std::make_shared;

#define WINTERMUTE_VERSION          "@WINTERMUTE_VERSION@"
#define WINTERMUTE_LOGGER_ROOT_NAME "root"
#define WINTERMUTE_ENV_PLUGIN_PATH  "WINTERMUTE_PLUGIN_PATH"
#define WINTERMUTE_ENV_LOG_LEVEL    "WINTERMUTE_LOG_LEVEL"

#ifdef WINTERMUTE_EXPORT
# define WINTERMUTE_EXPORT_PUBLIC  __attribute__ ((visibility ("default")))
# define WINTERMUTE_EXPORT_PRIVATE __attribute__ ((visibility ("hidden")))
#else
# define WINTERMUTE_EXPORT_PUBLIC
# define WINTERMUTE_EXPORT_PRIVATE
#endif

#ifdef WINTERMUTE_DEBUG
# define _GLIBCXX_DEBUG
#endif

#define UniquePtr  ::std::unique_ptr
#define SharedPtr  ::std::shared_ptr

// {{{ Private + Public Accessors

/// Defines inline instance-level methods to handle private instance data.
#define W_DEF_PRIVATE(Class) \
  using _Prv = Class##Private; \
  friend _Prv; \
  SharedPtr<_Prv> d_ptr = nullptr; \
  inline _Prv* d_func() const { return d_ptr.get(); } \
  inline _Prv* d_func() { return d_ptr.get(); }

#define W_DEF_PRIVATE_PREDECL(_Class) \
  SharedPtr<_Class> d_ptr; \
  inline _Class* d_func() const { return d_ptr.get(); } \
  inline _Class* d_func() { return d_ptr.get(); }


/// Defines inline instance-level methods to handle public instance data.
#define W_DEF_PUBLIC(Class) \
  friend class Class; \
  SharedPtr<Class> q_ptr; \
  inline Class* q_func() const { return q_ptr.get(); } \
  inline Class* q_func() { return q_ptr.get(); } \

#define W_DEF_PUBLIC_PREDECL(_Class) \
  SharedPtr<_Class> q_ptr; \
  inline _Class* q_func() const { return q_ptr.get(); } \
  inline _Class* q_func() { return q_ptr.get(); } \

/// Provides a shortcut to grab private data for an object with private data.
#define W_PRV(Class) Class##Private* const d = d_func();
#define W_PRVP(_Class) _Class* const d = d_func();

/// Provides a shortcut to grab private data for an static object with private data.
#define W_SPRV(Class) Class##Private* const d = Class::instance()->d_func();
#define W_SPRVP(_Class, Class) _Class* const d = Class::instance()->d_func();

/// Provides a shortcut to grab public data for an object with public data.
#define W_PUB(Class) Class* const q = q_func();

// }}}

#ifndef DOXYGEN_SHOULD_SKIP_THIS
/**
 * Provides a definition for sharable classes.
 * @ingroup Sharing Data
 */
#define W_DEF_SHAREABLE(Class) \
  public std::enable_shared_from_this<Class>

/**
 * Provides a definition for sharable classes.
 * @ingroup Sharing Data
 */
#define W_DECL_PTR_TYPE(Class) \
  typedef SharedPtr<Class> Ptr;

#endif

// {{{ Singleton class access

/**
 * Defines the logic needed to handle a singleton.
 * @ingroup Singletons
 */
#define W_DEF_SINGLETON(Class) \
  private: \
    static SharedPtr<Class> _instance; \
  public: \
    static inline SharedPtr<Class> instance() { \
      if (!_instance) { \
        _instance.reset(new Class()); \
      } \
      return _instance;  \
    }

/**
 * Declares the instance of the singleton as a nullptr.
 * @ingroup Singletons
 */
#define W_DECLARE_SINGLETON(Class) \
  SharedPtr<Class> Class::_instance(nullptr);

// {{{ Platform-specific types

namespace Wintermute
{
typedef ::pid_t PID;
}

// }}}

// {{{ Functions to help the process

inline void w_noop(void) { }

// }}}

#define __pure __attribute__((pure))
#define __hot __attribute__((hot))
#define __cold __attribute__((cold))

typedef unsigned int uint;

#endif
